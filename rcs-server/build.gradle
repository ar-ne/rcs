plugins {
    id 'java'
    id 'org.springframework.boot' version '2.4.1'
    id 'com.github.johnrengelman.processes' version "0.5.0"
    id 'org.springdoc.openapi-gradle-plugin' version "1.3.0"
    id 'io.spring.dependency-management' version '1.0.10.RELEASE'
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

ext {
    set('springBootAdminVersion', "2.3.1")
}

sourceCompatibility = 1.8
targetCompatibility = 1.8

dependencies {
    implementation project(path: ':rcs-shared')
    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    implementation 'org.springframework.boot:spring-boot-starter-data-redis'
    implementation 'org.springframework.boot:spring-boot-starter-data-mongodb'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'de.codecentric:spring-boot-admin-starter-client'
    implementation 'it.ozimov:embedded-redis:0.7.2'
    implementation 'de.flapdoodle.embed:de.flapdoodle.embed.mongo'
    implementation 'org.springdoc:springdoc-openapi-ui:1.5.2'
    implementation 'com.google.code.gson:gson:2.8.6'
    implementation 'org.jetbrains:annotations:20.1.0'

    compileOnly 'org.projectlombok:lombok'
    developmentOnly 'org.springframework.boot:spring-boot-devtools'
    annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'
    annotationProcessor 'org.projectlombok:lombok'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'

    implementation 'com.github.docker-java:docker-java-core:3.2.7'
    implementation 'com.github.docker-java:docker-java-transport-httpclient5:3.2.7'

    implementation 'org.springframework.boot:spring-boot-starter-websocket'
    implementation 'org.springframework.boot:spring-boot-starter-artemis'
    implementation 'org.apache.activemq:artemis-jms-server'
    implementation 'io.hawt:hawtio-springboot:2.12.0'
}

dependencyManagement {
    imports {
        mavenBom "de.codecentric:spring-boot-admin-dependencies:${springBootAdminVersion}"
    }
}

test {
    useJUnitPlatform()
}

configurations {
    [apiElements, runtimeElements].each {
        it.outgoing.artifacts.removeIf { it.buildDependencies.getDependencies(null).contains(jar) }
        it.outgoing.artifact(bootJar)
    }
}

task generateOpenApi() {
    doFirst {
        generateOpenApiDocs
    }
}